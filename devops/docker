1)
# Use an official OpenJDK runtime as a parent image
FROM  jdk

#set working directory before building image
# Set the working directory to /app
ADD target/app.jar app


EXPOSE 8080


entrypOINT["java"- "jar" "app.jar"]


2)Docker compose file

Docker-compose
 sevices:
   app:
    image:
   myswl:
    image:



### **üöÄ Docker Compose: Simplifying Multi-Container Applications**
Docker Compose is a tool used to **define and manage multi-container applications** using a simple YAML configuration file. It helps developers easily **run, stop, and scale** multiple interconnected services (containers) with a single command.

### **üîπ Why Use Docker Compose?**
- **Easier orchestration** of multi-container applications.
- **Single YAML file** (`docker-compose.yml`) defines all services.
- **One-command startup** for all containers (`docker-compose up`).
- **Automatic network creation** between containers.
- **Consistent environment setup** across teams.

---

### **üìå Example: Docker Compose for a Web Application**
Let‚Äôs say you have a **Node.js app** that relies on a **PostgreSQL database**. Using Docker Compose, you can manage both services together.

#### **Step 1: Create `docker-compose.yml`**
```yaml
version: '3.8'

services:
  app:
    image: node:18
    container_name: my-node-app
    working_dir: /app
    volumes:
      - .:/app
    ports:
      - "3000:3000"
    depends_on:
      - db
    command: ["node", "server.js"]

  db:
    image: postgres:latest
    container_name: my-postgres-db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
```

---

### **üîÑ Step 2: Run the Multi-Container App**
1. **Navigate to the directory** with `docker-compose.yml`
2. Run the following command:
   ```sh
   docker-compose up -d
   ```
   - `-d` runs containers in **detached mode** (background).

3. Verify running containers:
   ```sh
   docker ps
   ```

---

### **üõë Step 3: Stop and Remove Containers**
- **Stop the running containers**:
  ```sh
  docker-compose down
  ```
- This **removes all containers** and associated networks.

---




    =============================================================----------------------------------------------------

    3)






    Here‚Äôs how you can transfer a **JAR file** from your local PC to a Docker engine, create a **Docker image**, execute it, and list running containers:

    ### **1Ô∏è‚É£ Copy JAR File to Docker Engine**
    Use `docker cp` to transfer the JAR file to a container (if a container is already running):

    ```sh
    docker cp myapp.jar <container_id>:/app/myapp.jar
    ```

    If you want to **build the image with the JAR file inside**, follow the next step.

    ### **2Ô∏è‚É£ Create a Dockerfile**
    Inside the directory where the JAR file is located, create a `Dockerfile`:

    ```Dockerfile
    # Use an OpenJDK base image
    FROM openjdk:17-jdk-slim

    # Set the working directory
    WORKDIR /app

    # Copy the JAR file into the image
    COPY myapp.jar /app/myapp.jar

    # Run the JAR file when the container starts
    CMD ["java", "-jar", "myapp.jar"]
    ```

    ### **3Ô∏è‚É£ Build the Docker Image**
    Run the following command to create a Docker image:

    ```sh
    docker build -t myapp-image .
    ```

    ### **4Ô∏è‚É£ Run the Docker Container**
    Start a container from the created image:

    ```sh
    docker run --name myapp-container -d myapp-image
    ```

    ### **5Ô∏è‚É£ Show Running Containers**
    To list all running containers:

    ```sh
    docker ps
    ```

    ### **6Ô∏è‚É£ Check Container Logs (Optional)**
    If you want to check the output:

    ```sh
    docker logs myapp-container
    ```

    This setup ensures your JAR file runs inside a Docker container and can be managed easily.

    Would you like help with environment-specific configurations? üöÄ
