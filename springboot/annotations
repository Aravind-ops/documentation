)AOP – cross cutting operations with the help of some interceptors
1)@Apsect – class level annotation  all the @Advice will be method

) Point cut is  expression / condition
@Before(value=exection – packagename.method)

)@JointPoint – where this advice is implemented
@Before()
Public void beforeAdvice(JointPoint jionpoint){
Jointpoint.getmethod()
//logging
}





Best use case is logging in controller , service layer with start , stop

Interceptors are limited only at request and response but aop shall be implemented at any layer

--------------------------------------------------------------------------------------------------------------------
2)interceptors vs filters

1)interceptors have prehandle() postHandle() & implementation()

2) Filters take precedence over interceptors

3)both are mean for httpservlet request and response.

Filter layers sits before dispatcher servlet
Dispatcher servlet manage httprequest ,httpresponse to  controller
interceptor intercepts request before it reaches controller
------------------------------------------------------------------------------------------------------------------
3)Dependency Injection - this is one such aspect of inversion of control where container is delegated.

1)Constructor injection
2)Setter injection
3)Field injection


why field injection is not recommended
   1)Circular dependency
           Since the dependencies are injected when needed and not on the context load,
            Spring won’t throw BeanCurrentlyInCreationException.
   public class A{
   @Autowired
   classb dependency1

   public implement(){
   dependency1.impl();
   }

   }


    public class B{
      @Autowired
      classa dependency2

      public implement(){
      dependency1.impl();
      }

      }


      2)Private Field not accessible - spring container interally uses relection utils to inject beans


      public class A{

      @Autowired
      private Dependcy dependency;

      }

      3)Final fied not possible which is required for immutable classes
      4)Chance of null pointer execeptions as field injection invoked after constructor inititalization.


Field injection itself does not enable lazy loading, but you can make a field lazy-loaded by using the @Lazy annotation in Spring.
Lazy Loading with Field Injection
By default, Spring initializes all singleton beans eagerly at startup.
 However, if you want a bean to be initialized only when it is first accessed, you can use @Lazy


      ------------------------------------------------------------------------------------------

      Constructor injection
        1)Ensured all the dependencies are provided at the time of initialization.

        public class a{

        private final Dependency depenecy;// private final field allowed

        @Autowired
        class a(Dependency dependce){
        this.dependency=dependecy;
        }
        }


        Setter injection is preferred when partial fields are to be injected.// shall sove circular dependency problem as well


        --------------------------------------------------------------------------------------------------------

    4)``    Spring manages the lifecycle of beans through a series of well-defined steps, ensuring that beans are properly initialized, configured, and eventually destroyed. Here’s an overview of the key stages in the Spring bean lifecycle:

       1) Instantiation: The Spring container creates an instance of the bean using the constructor.
       2) Property Population: The container populates the bean’s properties using dependency injection.
        Aware Interfaces: If the bean implements any of the Aware interfaces (e.g., BeanNameAware, BeanFactoryAware, ApplicationContextAware), the container calls the corresponding methods to provide the necessary references.
        Java

        public class MyBean implements BeanNameAware, BeanFactoryAware {
            @Override
            public void setBeanName(String name) {
                // Bean name is set
            }

            @Override
            public void setBeanFactory(BeanFactory beanFactory) {
                // BeanFactory is set
            }
        }
        AI-generated code. Review and use carefully. More info on FAQ.

        3)Bean Post Processors: The container applies any BeanPostProcessor implementations before and after the initialization callbacks. These processors can modify the bean instance.
        Java

        public class CustomBeanPostProcessor implements BeanPostProcessor {
            @Override
            public Object postProcessBeforeInitialization(Object bean, String beanName) {
                // Custom logic before initialization
                return bean;
            }

            @Override
            public Object postProcessAfterInitialization(Object bean, String beanName) {
                // Custom logic after initialization
                return bean;
            }
        }
        AI-generated code. Review and use carefully. More info on FAQ.
        Initialization Callbacks: The container calls any initialization methods. This can be done using the @PostConstruct annotation or by implementing the InitializingBean interface.
        Java

        @PostConstruct
        public void init() {
            // Initialization logic
        }
        AI-generated code. Review and use carefully. More info on FAQ.
        Bean Ready for Use: The bean is now fully initialized and ready to be used by the application.


        4)Destruction Callbacks: When the container is shutting down, it calls any destruction methods. This can be done using the @PreDestroy annotation or by implementing the DisposableBean interface.
        Java

        @PreDestroy
        public void destroy() {
            // Cleanup logic
        }
        AI-generated code. Review and use carefully. More info on FAQ.
        Bean Destruction: The container removes the bean from the context and performs any necessary cleanup.
        These steps ensure that beans are properly managed throughout their lifecycle, allowing for custom initialization and cleanup logic123.



        -----------------------------------------------------------------------------------------

        5)Spring Boot lets you wire beans that you may not be aware you need. It also showed how to turn on convenient management services. However, Spring Boot does more than that. It supports not only traditional WAR file deployments but also lets you put together executable JARs, thanks to Spring Boot’s loader module. The various guides demonstrate this dual support through the spring-boot-gradle-plugin and spring-boot-maven-plugin.

          The Library project has no class with a main method (because it is not an application).
           Consequently, you have to tell the build system to not try to build an executable jar for the Library project. (By default, the Spring Initializr builds executable projects.)

          To tell Maven to not build an executable jar for the Library project,
          you must remove the following block from the pom.xml created by the Spring Initializr:

          org.springframework.boot spring-boot-maven-plugin
          gradle option

          The bootJar task tries to create an executable jar, and that requires a main() method.

          As a result, you need to disable it by disabling the the Spring Boot plugin,
          while keeping it for its dependency management features.

          Also, now that we have disabled the Spring Boot plugin,
          it no longer automatically configures the JavaCompiler task to enable the -parameters option.
           This is important if you are using an expression that refers to a parameter name. The following enables this option:

          plugins { id 'org.springframework.boot' version '3.3.0' apply false id 'io.spring.dependency-management' version '1.1.5' id 'java' }

          group = 'com.example' version = '0.0.1-SNAPSHOT'

          java { sourceCompatibility = '17' }

          repositories { mavenCentral() }

          dependencyManagement { imports { mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES } }

          dependencies { implementation 'org.springframework.boot:spring-boot' testImplementation 'org.springframework.boot:spring-boot-starter-test' }

          tasks.withType(JavaCompile).configureEach { options.compilerArgs.add("-parameters") }

          -----------------------------------------------------------------------
          The ApplicationContext and BeanFactory are both interfaces in the Spring framework
           used for managing beans, but they have some key differences:

          Initialization:
          BeanFactory: Uses lazy initialization, meaning beans are created only when they are requested.
          ApplicationContext: Uses eager initialization, meaning all singleton beans are created at startup.

          ApplicationContext context= new AnnotationConfigApplicationContext(Myclass.class);
         MyBean mybean= context.getbean("Mybean.class");



         --------------------------------------------------------------------------------------------------------------

         6)Springboot actuators


         1)- What are some commonly used Actuator endpoints?
           Some commonly used endpoints include:
           - /actuator/health - Provides application health status.
           - /actuator/info - Displays application information.
           - /actuator/metrics - Shows various metrics like memory usage, request count, etc.
           - /actuator/env - Displays environment properties.
           -/actuator/shutdown - graceful shutdown
           /actuator/threaddump: Performs a thread dump, which can be useful for diagnosing deadlocks or performance issues.
           /actuator/heapdump: Creates a heap dump file,


           management.endpoint.health.show-details=always
           management.endpoints.web.exposure.include=health,info


           2)  - Can you create custom Actuator endpoints?
               Yes, you can create custom endpoints using the @Endpoint annotation. Example:
               @Endpoint(id = "customEndpoint")
               @Component
               public class CustomEndpoint {
                   @ReadOperation
                   public String customMethod() {
                       return "Custom Actuator Endpoint";
                   }
               }





         3) How do you secure Actuator endpoints?
           Answer: Securing Actuator endpoints is crucial, especially in production environments, as they can expose sensitive information.

           Spring Security Integration: If spring-boot-starter-security is on the classpath, Spring Boot automatically secures all Actuator endpoints (except /health and /info) by default. You can then configure roles and authentication mechanisms (e.g., basic auth, OAuth2) using Spring Security.
           Custom Security Configuration: You can define your own SecurityFilterChain bean to customize security rules for Actuator endpoints. For example, to restrict access to certain roles:
           Java

           @Configuration
           public class ActuatorSecurityConfig {

               @Bean
               public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
                   http
                       .authorizeHttpRequests(authorize -> authorize
                           .requestMatchers("/actuator/health", "/actuator/info").permitAll()
                           .requestMatchers("/actuator/**").hasRole("ADMIN")
                           .anyRequest().authenticated()
                       )
                       .httpBasic(Customizer.withDefaults()); // Or formLogin, etc.
                   return http.build();
               }
           }


