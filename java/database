
Mongodb sherding
Mongotemplate vs mongo repository
Mongodb replicas


-------------------------


q1)

A **clustered index** and a **non-clustered index** are two types of indexes used in databases to optimize query performance. Hereâ€™s how they differ:

### **Clustered Index**
- **Defines the physical order** of data in a table.
- The actual table data is stored in the order of the indexed column.
- **Only one clustered index** can exist per table.
- **Faster for range-based queries** and sorting operations.

**Example:**
```sql
CREATE TABLE Employees (
    ID INT PRIMARY KEY,  -- Primary key automatically creates a clustered index
    Name VARCHAR(100),
    Salary DECIMAL(10,2)
);
```
Here, the `ID` column is a **clustered index**, meaning the table data is physically sorted by `ID`.

### **Non-Clustered Index**
- Stores index separately from the actual table data.
- **Multiple non-clustered indexes** can exist per table.
- **Faster for specific lookups** but slower for range queries.

**Example:**
```sql
CREATE NONCLUSTERED INDEX idx_salary ON Employees(Salary);
```
This creates a **non-clustered index** on the `Salary` column, allowing faster searches for employees based on salary.

For a deeper comparison, check out [this guide](https://www.geeksforgeeks.org/difference-between-clustered-and-non-clustered-index/) or [this tutorial](https://www.guru99.com/clustered-vs-non-clustered-index.html). Let me know if you need more details!



------------------------------------------------------------------------------------------


Q2) internal working of index

How Indexing Speeds Up Queries
- Without an index, a query like:
SELECT * FROM employees WHERE last_name = 'Smith';
- would require scanning every row (O(n) complexity).
- With an index, the database directly finds the relevant rows using a pointer (O(log n) complexity for B-Trees, O(1) for Hash Indexes).
3. Index Lookup Process- The database searches the index instead of scanning the table.
- The index contains key-value pairs (column values mapped to row locations).
- Once the key is f


-----------------------------------------------------------------------------------------------------------------------

Q3) caching in hibernate

L1 cache - managed at session object level , cleared for new session , enabled by default

L2 Cache -- not provided by hibernate -- need to integrate with third party libraries


     EhCahe

     <hibernate-configuration>
         <session-factory>
             <property name="hibernate.cache.use_second_level_cache">true</property>
             <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
         </session-factory>
     </hibernate-configuration>


     @Entity
     @Cacheable
     @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
     public class Employee {
         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)
         private Long id;

         private String name;
     }

     ---------------------------------------------------------
     Q4)

     The key difference between Repeatable Read and Read Committed isolation levels lies in how they handle concurrent transactions:
     - Read Committed: Ensures that a transaction only reads committed data, preventing dirty reads. However, it does not prevent non-repeatable reads, meaning if a transaction reads the same row twice, another transaction might modify it in between, leading to different results.
     - Repeatable Read: Provides a higher level of isolation by preventing non-repeatable reads. Once a transaction reads a row, no other transaction can modify it until the first transaction completes. However, phantom reads (new rows being added by other transactions) can still occur.
     In short, Repeatable Read offers stronger consistency guarantees than Read Committed, but it does not fully prevent all concurrency issues.
